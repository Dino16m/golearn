// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package container

import (
	"github.com/dino16m/golearn-core/controller"
	"github.com/dino16m/golearn-core/event"
	"github.com/dino16m/golearn-core/middlewares"
	services2 "github.com/dino16m/golearn-core/services"
	"github.com/gobuffalo/gocraft-work-adapter"
	"github.com/google/wire"
	"github.com/sirupsen/logrus"
	"golearn-api-template/config"
	"golearn-api-template/repositories"
	"golearn-api-template/services"
	"gorm.io/gorm"
)

// Injectors from app.go:

func ProvideApp() App {
	superConfig := ProvideConfig()
	db := ProvideDB(superConfig)
	repositoryContainer := RepositoryProvider(db)
	serviceContainer := ServiceProvider(repositoryContainer, superConfig)
	eventEventDispatcher := provideEventDispatcher()
	controllerContainer := ControllerProvider(serviceContainer, eventEventDispatcher)
	middlewareContainer := MiddlewareProvider(serviceContainer, repositoryContainer, superConfig)
	adapter := ProvideWorker(superConfig)
	logger := ProvideLogger(superConfig)
	app := App{
		DB:              db,
		Config:          superConfig,
		Controllers:     controllerContainer,
		EventDispatcher: eventEventDispatcher,
		Services:        serviceContainer,
		Repositories:    repositoryContainer,
		Middlewares:     middlewareContainer,
		Worker:          adapter,
		Logger:          logger,
	}
	return app
}

// Injectors from controllers.go:

func ControllerProvider(services ServiceContainer, dispatcher event.Dispatcher) ControllerContainer {
	userService := services.UserService
	authController := controller.NewAuthController(userService, dispatcher)
	jwtAuthService := services.JWTAuthService
	authService := services.AuthService
	jwtAuthController := controller.NewJWTAuthController(jwtAuthService, authService)
	controllerContainer := ControllerContainer{
		AuthController:    authController,
		JWTAuthController: jwtAuthController,
	}
	return controllerContainer
}

// Injectors from middleware.go:

func MiddlewareProvider(services ServiceContainer, repositories RepositoryContainer, cfg config.SuperConfig) MiddlewareContainer {
	csrfMiddleware := ProvideCSRFMiddleware(cfg)
	jwtAuthService := services.JWTAuthService
	userRepository := repositories.UserRepository
	jwtAuthMiddleware := middlewares.NewJWTAuthMiddleware(jwtAuthService, userRepository)
	corsConfig := cfg.CORSConfig
	corsMiddleware := middlewares.NewCORSMiddleware(corsConfig)
	middlewareContainer := MiddlewareContainer{
		CSRFMiddleware:    csrfMiddleware,
		JWTAuthMiddleware: jwtAuthMiddleware,
		CORSMiddleware:    corsMiddleware,
	}
	return middlewareContainer
}

// Injectors from repositories.go:

func RepositoryProvider(db *gorm.DB) RepositoryContainer {
	userRepository := repositories.NewUserRepository(db)
	repositoryContainer := RepositoryContainer{
		UserRepository: userRepository,
	}
	return repositoryContainer
}

// Injectors from services.go:

func ServiceProvider(repositories2 RepositoryContainer, cfg config.SuperConfig) ServiceContainer {
	userRepository := repositories2.UserRepository
	userService := services.NewUserService(userRepository)
	authService := services.NewAuthService(userRepository)
	jwtOptions := cfg.JwtOptions
	jwtAuthService := services2.NewJWTAuthService(jwtOptions)
	serviceContainer := ServiceContainer{
		UserService:    userService,
		AuthService:    authService,
		JWTAuthService: jwtAuthService,
	}
	return serviceContainer
}

// app.go:

type App struct {
	DB              *gorm.DB
	Config          config.SuperConfig
	Controllers     ControllerContainer
	EventDispatcher *event.EventDispatcher
	Services        ServiceContainer
	Repositories    RepositoryContainer
	Middlewares     MiddlewareContainer
	Worker          *gwa.Adapter
	Logger          *logrus.Logger
}

// controllers.go:

// Container is a super struct which contains all the controllers
// available in this app, it will enable service locators to function.
type ControllerContainer struct {
	AuthController    controller.AuthController
	JWTAuthController controller.JWTAuthController
}

var AuthenticatorBinding = wire.Bind(new(controller.Authenticator), new(services.AuthService))

var UserServiceBinding = wire.Bind(new(controller.UserService), new(services.UserService))

var ControllerSet = wire.NewSet(
	AuthenticatorBinding,
	UserServiceBinding, controller.NewAuthController, controller.NewJWTAuthController, JWTAuthServiceSet, wire.FieldsOf(new(ServiceContainer), "AuthService", "UserService", "JWTAuthService"),
)

// middleware.go:

type MiddlewareContainer struct {
	CSRFMiddleware    middlewares.CSRFMiddleware
	JWTAuthMiddleware middlewares.JWTAuthMiddleware
	CORSMiddleware    middlewares.CORSMiddleware
}

func ProvideCSRFMiddleware(cfg config.SuperConfig) middlewares.CSRFMiddleware {
	return middlewares.NewCSRFMiddleware(cfg.SecretKey, cfg.Env, cfg.SessionOptions)
}

var UserRepositoryBinding = wire.Bind(new(middlewares.UserRepository), new(repositories.UserRepository))

var MiddlewareSet = wire.NewSet(
	ProvideCSRFMiddleware,
	UserRepositoryBinding, middlewares.NewCORSMiddleware, middlewares.NewJWTAuthMiddleware, wire.FieldsOf(new(RepositoryContainer), "UserRepository"), wire.FieldsOf(new(config.SuperConfig), "CORSConfig"), wire.FieldsOf(new(ServiceContainer), "JWTAuthService"))

// repositories.go:

type RepositoryContainer struct {
	UserRepository repositories.UserRepository
}

var RepositorySet = wire.NewSet(repositories.NewUserRepository)

// services.go:

type ServiceContainer struct {
	UserService    services.UserService
	AuthService    services.AuthService
	JWTAuthService services2.JWTAuthService
}

var ServiceContainerSet = wire.NewSet(services.NewAuthService, services.NewUserService, services2.NewJWTAuthService, wire.Bind(new(services.UserRepository), new(repositories.UserRepository)), wire.FieldsOf(new(RepositoryContainer), "UserRepository"), wire.FieldsOf(new(config.SuperConfig), "JwtOptions"))

var JWTAuthServiceSet = wire.Bind(new(controller.JWTAuthService), new(services2.JWTAuthService))
